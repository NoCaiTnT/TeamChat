// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: email.proto

#include "email.pb.h"
#include "email.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace email {

static const char* Email_method_names[] = {
  "/email.Email/postRegisterEmailCode",
  "/email.Email/postRetrieveEmailCode",
};

std::unique_ptr< Email::Stub> Email::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Email::Stub> stub(new Email::Stub(channel, options));
  return stub;
}

Email::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_postRegisterEmailCode_(Email_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_postRetrieveEmailCode_(Email_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Email::Stub::postRegisterEmailCode(::grpc::ClientContext* context, const ::email::UserRegisterEmail& request, ::email::RegisterEmailReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::email::UserRegisterEmail, ::email::RegisterEmailReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_postRegisterEmailCode_, context, request, response);
}

void Email::Stub::async::postRegisterEmailCode(::grpc::ClientContext* context, const ::email::UserRegisterEmail* request, ::email::RegisterEmailReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::email::UserRegisterEmail, ::email::RegisterEmailReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postRegisterEmailCode_, context, request, response, std::move(f));
}

void Email::Stub::async::postRegisterEmailCode(::grpc::ClientContext* context, const ::email::UserRegisterEmail* request, ::email::RegisterEmailReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postRegisterEmailCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::email::RegisterEmailReply>* Email::Stub::PrepareAsyncpostRegisterEmailCodeRaw(::grpc::ClientContext* context, const ::email::UserRegisterEmail& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::email::RegisterEmailReply, ::email::UserRegisterEmail, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_postRegisterEmailCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::email::RegisterEmailReply>* Email::Stub::AsyncpostRegisterEmailCodeRaw(::grpc::ClientContext* context, const ::email::UserRegisterEmail& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpostRegisterEmailCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Email::Stub::postRetrieveEmailCode(::grpc::ClientContext* context, const ::email::UserRetrieveEmail& request, ::email::RetrieveEmailReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::email::UserRetrieveEmail, ::email::RetrieveEmailReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_postRetrieveEmailCode_, context, request, response);
}

void Email::Stub::async::postRetrieveEmailCode(::grpc::ClientContext* context, const ::email::UserRetrieveEmail* request, ::email::RetrieveEmailReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::email::UserRetrieveEmail, ::email::RetrieveEmailReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postRetrieveEmailCode_, context, request, response, std::move(f));
}

void Email::Stub::async::postRetrieveEmailCode(::grpc::ClientContext* context, const ::email::UserRetrieveEmail* request, ::email::RetrieveEmailReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postRetrieveEmailCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::email::RetrieveEmailReply>* Email::Stub::PrepareAsyncpostRetrieveEmailCodeRaw(::grpc::ClientContext* context, const ::email::UserRetrieveEmail& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::email::RetrieveEmailReply, ::email::UserRetrieveEmail, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_postRetrieveEmailCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::email::RetrieveEmailReply>* Email::Stub::AsyncpostRetrieveEmailCodeRaw(::grpc::ClientContext* context, const ::email::UserRetrieveEmail& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpostRetrieveEmailCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

Email::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Email_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Email::Service, ::email::UserRegisterEmail, ::email::RegisterEmailReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Email::Service* service,
             ::grpc::ServerContext* ctx,
             const ::email::UserRegisterEmail* req,
             ::email::RegisterEmailReply* resp) {
               return service->postRegisterEmailCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Email_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Email::Service, ::email::UserRetrieveEmail, ::email::RetrieveEmailReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Email::Service* service,
             ::grpc::ServerContext* ctx,
             const ::email::UserRetrieveEmail* req,
             ::email::RetrieveEmailReply* resp) {
               return service->postRetrieveEmailCode(ctx, req, resp);
             }, this)));
}

Email::Service::~Service() {
}

::grpc::Status Email::Service::postRegisterEmailCode(::grpc::ServerContext* context, const ::email::UserRegisterEmail* request, ::email::RegisterEmailReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Email::Service::postRetrieveEmailCode(::grpc::ServerContext* context, const ::email::UserRetrieveEmail* request, ::email::RetrieveEmailReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace email

