// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weather.proto

#include "weather.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace weather {

inline constexpr UserInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        userip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UserInfo::UserInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;

inline constexpr LivesWeather::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : weather_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        temperature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        winddirection_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        windpower_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        humidity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reporttime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        temperaturefloat_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        humidityfloat_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LivesWeather::LivesWeather(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LivesWeatherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LivesWeatherDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LivesWeatherDefaultTypeInternal() {}
  union {
    LivesWeather _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LivesWeatherDefaultTypeInternal _LivesWeather_default_instance_;

inline constexpr ForecastWeather::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : date_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        week_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dayweather_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nightweather_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        daytemp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nighttemp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        daywind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nightwind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        daypower_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nightpower_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ForecastWeather::ForecastWeather(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ForecastWeatherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForecastWeatherDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForecastWeatherDefaultTypeInternal() {}
  union {
    ForecastWeather _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForecastWeatherDefaultTypeInternal _ForecastWeather_default_instance_;

inline constexpr LivesWeatherReplay::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        livesweather_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LivesWeatherReplay::LivesWeatherReplay(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LivesWeatherReplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LivesWeatherReplayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LivesWeatherReplayDefaultTypeInternal() {}
  union {
    LivesWeatherReplay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LivesWeatherReplayDefaultTypeInternal _LivesWeatherReplay_default_instance_;

inline constexpr ForecastWeatherReplay::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forecastweathers_{},
        reporttime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ForecastWeatherReplay::ForecastWeatherReplay(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ForecastWeatherReplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForecastWeatherReplayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForecastWeatherReplayDefaultTypeInternal() {}
  union {
    ForecastWeatherReplay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForecastWeatherReplayDefaultTypeInternal _ForecastWeatherReplay_default_instance_;
}  // namespace weather
static ::_pb::Metadata file_level_metadata_weather_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_weather_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_weather_2eproto = nullptr;
const ::uint32_t TableStruct_weather_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::weather::UserInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::weather::UserInfo, _impl_.username_),
    PROTOBUF_FIELD_OFFSET(::weather::UserInfo, _impl_.userip_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _impl_.weather_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _impl_.temperature_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _impl_.winddirection_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _impl_.windpower_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _impl_.humidity_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _impl_.reporttime_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _impl_.temperaturefloat_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeather, _impl_.humidityfloat_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.date_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.week_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.dayweather_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.nightweather_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.daytemp_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.nighttemp_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.daywind_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.nightwind_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.daypower_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeather, _impl_.nightpower_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeatherReplay, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeatherReplay, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::weather::LivesWeatherReplay, _impl_.livesweather_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeatherReplay, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeatherReplay, _impl_.reporttime_),
    PROTOBUF_FIELD_OFFSET(::weather::ForecastWeatherReplay, _impl_.forecastweathers_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::weather::UserInfo)},
        {10, -1, -1, sizeof(::weather::LivesWeather)},
        {26, -1, -1, sizeof(::weather::ForecastWeather)},
        {44, 53, -1, sizeof(::weather::LivesWeatherReplay)},
        {54, -1, -1, sizeof(::weather::ForecastWeatherReplay)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::weather::_UserInfo_default_instance_._instance,
    &::weather::_LivesWeather_default_instance_._instance,
    &::weather::_ForecastWeather_default_instance_._instance,
    &::weather::_LivesWeatherReplay_default_instance_._instance,
    &::weather::_ForecastWeatherReplay_default_instance_._instance,
};
const char descriptor_table_protodef_weather_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rweather.proto\022\007weather\",\n\010UserInfo\022\020\n\010"
    "username\030\001 \001(\t\022\016\n\006userip\030\002 \001(\t\"\265\001\n\014Lives"
    "Weather\022\017\n\007weather\030\001 \001(\t\022\023\n\013temperature\030"
    "\002 \001(\t\022\025\n\rwinddirection\030\003 \001(\t\022\021\n\twindpowe"
    "r\030\004 \001(\t\022\020\n\010humidity\030\005 \001(\t\022\022\n\nreporttime\030"
    "\006 \001(\t\022\030\n\020temperatureFloat\030\007 \001(\t\022\025\n\rhumid"
    "ityFloat\030\010 \001(\t\"\305\001\n\017ForecastWeather\022\014\n\004da"
    "te\030\001 \001(\t\022\014\n\004week\030\002 \001(\t\022\022\n\ndayweather\030\003 \001"
    "(\t\022\024\n\014nightweather\030\004 \001(\t\022\017\n\007daytemp\030\005 \001("
    "\t\022\021\n\tnighttemp\030\006 \001(\t\022\017\n\007daywind\030\007 \001(\t\022\021\n"
    "\tnightwind\030\010 \001(\t\022\020\n\010daypower\030\t \001(\t\022\022\n\nni"
    "ghtpower\030\n \001(\t\"A\n\022LivesWeatherReplay\022+\n\014"
    "livesWeather\030\001 \001(\0132\025.weather.LivesWeathe"
    "r\"_\n\025ForecastWeatherReplay\022\022\n\nreporttime"
    "\030\001 \001(\t\0222\n\020forecastWeathers\030\002 \003(\0132\030.weath"
    "er.ForecastWeather2\231\001\n\007Weather\022C\n\017getLiv"
    "esWeather\022\021.weather.UserInfo\032\033.weather.L"
    "ivesWeatherReplay\"\000\022I\n\022getForecastWeathe"
    "r\022\021.weather.UserInfo\032\036.weather.ForecastW"
    "eatherReplay\"\000B7\n\030io.grpc.teamchat.weath"
    "erB\014WeatherProtoP\001\242\002\nTC_Weatherb\006proto3"
};
static ::absl::once_flag descriptor_table_weather_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_weather_2eproto = {
    false,
    false,
    839,
    descriptor_table_protodef_weather_2eproto,
    "weather.proto",
    &descriptor_table_weather_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_weather_2eproto::offsets,
    file_level_metadata_weather_2eproto,
    file_level_enum_descriptors_weather_2eproto,
    file_level_service_descriptors_weather_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_weather_2eproto_getter() {
  return &descriptor_table_weather_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_weather_2eproto(&descriptor_table_weather_2eproto);
namespace weather {
// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:weather.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : username_(arena, from.username_),
        userip_(arena, from.userip_),
        _cached_size_{0} {}

UserInfo::UserInfo(
    ::google::protobuf::Arena* arena,
    const UserInfo& from)
    : ::google::protobuf::Message(arena) {
  UserInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:weather.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : username_(arena),
        userip_(arena),
        _cached_size_{0} {}

inline void UserInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:weather.UserInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UserInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.username_.Destroy();
  _impl_.userip_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:weather.UserInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.userip_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 39, 2> UserInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_UserInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string userip = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.userip_)}},
    // string username = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.username_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string username = 1;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.username_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string userip = 2;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.userip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\10\6\0\0\0\0\0"
    "weather.UserInfo"
    "username"
    "userip"
  }},
};

::uint8_t* UserInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:weather.UserInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    const std::string& _s = this->_internal_username();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.UserInfo.username");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string userip = 2;
  if (!this->_internal_userip().empty()) {
    const std::string& _s = this->_internal_userip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.UserInfo.userip");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:weather.UserInfo)
  return target;
}

::size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:weather.UserInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_username());
  }

  // string userip = 2;
  if (!this->_internal_userip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_userip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UserInfo::_class_data_ = {
    UserInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* UserInfo::GetClassData() const {
  return &_class_data_;
}

void UserInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:weather.UserInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_userip().empty()) {
    _this->_internal_set_userip(from._internal_userip());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:weather.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UserInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* UserInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void UserInfo::InternalSwap(UserInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userip_, &other->_impl_.userip_, arena);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_weather_2eproto_getter, &descriptor_table_weather_2eproto_once,
      file_level_metadata_weather_2eproto[0]);
}
// ===================================================================

class LivesWeather::_Internal {
 public:
};

LivesWeather::LivesWeather(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:weather.LivesWeather)
}
inline PROTOBUF_NDEBUG_INLINE LivesWeather::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : weather_(arena, from.weather_),
        temperature_(arena, from.temperature_),
        winddirection_(arena, from.winddirection_),
        windpower_(arena, from.windpower_),
        humidity_(arena, from.humidity_),
        reporttime_(arena, from.reporttime_),
        temperaturefloat_(arena, from.temperaturefloat_),
        humidityfloat_(arena, from.humidityfloat_),
        _cached_size_{0} {}

LivesWeather::LivesWeather(
    ::google::protobuf::Arena* arena,
    const LivesWeather& from)
    : ::google::protobuf::Message(arena) {
  LivesWeather* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:weather.LivesWeather)
}
inline PROTOBUF_NDEBUG_INLINE LivesWeather::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : weather_(arena),
        temperature_(arena),
        winddirection_(arena),
        windpower_(arena),
        humidity_(arena),
        reporttime_(arena),
        temperaturefloat_(arena),
        humidityfloat_(arena),
        _cached_size_{0} {}

inline void LivesWeather::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LivesWeather::~LivesWeather() {
  // @@protoc_insertion_point(destructor:weather.LivesWeather)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LivesWeather::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.weather_.Destroy();
  _impl_.temperature_.Destroy();
  _impl_.winddirection_.Destroy();
  _impl_.windpower_.Destroy();
  _impl_.humidity_.Destroy();
  _impl_.reporttime_.Destroy();
  _impl_.temperaturefloat_.Destroy();
  _impl_.humidityfloat_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LivesWeather::Clear() {
// @@protoc_insertion_point(message_clear_start:weather.LivesWeather)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weather_.ClearToEmpty();
  _impl_.temperature_.ClearToEmpty();
  _impl_.winddirection_.ClearToEmpty();
  _impl_.windpower_.ClearToEmpty();
  _impl_.humidity_.ClearToEmpty();
  _impl_.reporttime_.ClearToEmpty();
  _impl_.temperaturefloat_.ClearToEmpty();
  _impl_.humidityfloat_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LivesWeather::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 124, 2> LivesWeather::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LivesWeather_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string humidityFloat = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.humidityfloat_)}},
    // string weather = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.weather_)}},
    // string temperature = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.temperature_)}},
    // string winddirection = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.winddirection_)}},
    // string windpower = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.windpower_)}},
    // string humidity = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.humidity_)}},
    // string reporttime = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.reporttime_)}},
    // string temperatureFloat = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.temperaturefloat_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string weather = 1;
    {PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.weather_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string temperature = 2;
    {PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string winddirection = 3;
    {PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.winddirection_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string windpower = 4;
    {PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.windpower_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string humidity = 5;
    {PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.humidity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reporttime = 6;
    {PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.reporttime_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string temperatureFloat = 7;
    {PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.temperaturefloat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string humidityFloat = 8;
    {PROTOBUF_FIELD_OFFSET(LivesWeather, _impl_.humidityfloat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\7\13\15\11\10\12\20\15\0\0\0\0\0\0\0"
    "weather.LivesWeather"
    "weather"
    "temperature"
    "winddirection"
    "windpower"
    "humidity"
    "reporttime"
    "temperatureFloat"
    "humidityFloat"
  }},
};

::uint8_t* LivesWeather::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:weather.LivesWeather)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string weather = 1;
  if (!this->_internal_weather().empty()) {
    const std::string& _s = this->_internal_weather();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.LivesWeather.weather");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string temperature = 2;
  if (!this->_internal_temperature().empty()) {
    const std::string& _s = this->_internal_temperature();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.LivesWeather.temperature");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string winddirection = 3;
  if (!this->_internal_winddirection().empty()) {
    const std::string& _s = this->_internal_winddirection();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.LivesWeather.winddirection");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string windpower = 4;
  if (!this->_internal_windpower().empty()) {
    const std::string& _s = this->_internal_windpower();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.LivesWeather.windpower");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string humidity = 5;
  if (!this->_internal_humidity().empty()) {
    const std::string& _s = this->_internal_humidity();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.LivesWeather.humidity");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string reporttime = 6;
  if (!this->_internal_reporttime().empty()) {
    const std::string& _s = this->_internal_reporttime();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.LivesWeather.reporttime");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string temperatureFloat = 7;
  if (!this->_internal_temperaturefloat().empty()) {
    const std::string& _s = this->_internal_temperaturefloat();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.LivesWeather.temperatureFloat");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string humidityFloat = 8;
  if (!this->_internal_humidityfloat().empty()) {
    const std::string& _s = this->_internal_humidityfloat();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.LivesWeather.humidityFloat");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:weather.LivesWeather)
  return target;
}

::size_t LivesWeather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:weather.LivesWeather)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string weather = 1;
  if (!this->_internal_weather().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_weather());
  }

  // string temperature = 2;
  if (!this->_internal_temperature().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_temperature());
  }

  // string winddirection = 3;
  if (!this->_internal_winddirection().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_winddirection());
  }

  // string windpower = 4;
  if (!this->_internal_windpower().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_windpower());
  }

  // string humidity = 5;
  if (!this->_internal_humidity().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_humidity());
  }

  // string reporttime = 6;
  if (!this->_internal_reporttime().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reporttime());
  }

  // string temperatureFloat = 7;
  if (!this->_internal_temperaturefloat().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_temperaturefloat());
  }

  // string humidityFloat = 8;
  if (!this->_internal_humidityfloat().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_humidityfloat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LivesWeather::_class_data_ = {
    LivesWeather::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LivesWeather::GetClassData() const {
  return &_class_data_;
}

void LivesWeather::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LivesWeather*>(&to_msg);
  auto& from = static_cast<const LivesWeather&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:weather.LivesWeather)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_weather().empty()) {
    _this->_internal_set_weather(from._internal_weather());
  }
  if (!from._internal_temperature().empty()) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  if (!from._internal_winddirection().empty()) {
    _this->_internal_set_winddirection(from._internal_winddirection());
  }
  if (!from._internal_windpower().empty()) {
    _this->_internal_set_windpower(from._internal_windpower());
  }
  if (!from._internal_humidity().empty()) {
    _this->_internal_set_humidity(from._internal_humidity());
  }
  if (!from._internal_reporttime().empty()) {
    _this->_internal_set_reporttime(from._internal_reporttime());
  }
  if (!from._internal_temperaturefloat().empty()) {
    _this->_internal_set_temperaturefloat(from._internal_temperaturefloat());
  }
  if (!from._internal_humidityfloat().empty()) {
    _this->_internal_set_humidityfloat(from._internal_humidityfloat());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LivesWeather::CopyFrom(const LivesWeather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:weather.LivesWeather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LivesWeather::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LivesWeather::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LivesWeather::InternalSwap(LivesWeather* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weather_, &other->_impl_.weather_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.temperature_, &other->_impl_.temperature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.winddirection_, &other->_impl_.winddirection_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.windpower_, &other->_impl_.windpower_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.humidity_, &other->_impl_.humidity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reporttime_, &other->_impl_.reporttime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.temperaturefloat_, &other->_impl_.temperaturefloat_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.humidityfloat_, &other->_impl_.humidityfloat_, arena);
}

::google::protobuf::Metadata LivesWeather::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_weather_2eproto_getter, &descriptor_table_weather_2eproto_once,
      file_level_metadata_weather_2eproto[1]);
}
// ===================================================================

class ForecastWeather::_Internal {
 public:
};

ForecastWeather::ForecastWeather(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:weather.ForecastWeather)
}
inline PROTOBUF_NDEBUG_INLINE ForecastWeather::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : date_(arena, from.date_),
        week_(arena, from.week_),
        dayweather_(arena, from.dayweather_),
        nightweather_(arena, from.nightweather_),
        daytemp_(arena, from.daytemp_),
        nighttemp_(arena, from.nighttemp_),
        daywind_(arena, from.daywind_),
        nightwind_(arena, from.nightwind_),
        daypower_(arena, from.daypower_),
        nightpower_(arena, from.nightpower_),
        _cached_size_{0} {}

ForecastWeather::ForecastWeather(
    ::google::protobuf::Arena* arena,
    const ForecastWeather& from)
    : ::google::protobuf::Message(arena) {
  ForecastWeather* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:weather.ForecastWeather)
}
inline PROTOBUF_NDEBUG_INLINE ForecastWeather::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : date_(arena),
        week_(arena),
        dayweather_(arena),
        nightweather_(arena),
        daytemp_(arena),
        nighttemp_(arena),
        daywind_(arena),
        nightwind_(arena),
        daypower_(arena),
        nightpower_(arena),
        _cached_size_{0} {}

inline void ForecastWeather::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ForecastWeather::~ForecastWeather() {
  // @@protoc_insertion_point(destructor:weather.ForecastWeather)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ForecastWeather::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.date_.Destroy();
  _impl_.week_.Destroy();
  _impl_.dayweather_.Destroy();
  _impl_.nightweather_.Destroy();
  _impl_.daytemp_.Destroy();
  _impl_.nighttemp_.Destroy();
  _impl_.daywind_.Destroy();
  _impl_.nightwind_.Destroy();
  _impl_.daypower_.Destroy();
  _impl_.nightpower_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ForecastWeather::Clear() {
// @@protoc_insertion_point(message_clear_start:weather.ForecastWeather)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.date_.ClearToEmpty();
  _impl_.week_.ClearToEmpty();
  _impl_.dayweather_.ClearToEmpty();
  _impl_.nightweather_.ClearToEmpty();
  _impl_.daytemp_.ClearToEmpty();
  _impl_.nighttemp_.ClearToEmpty();
  _impl_.daywind_.ClearToEmpty();
  _impl_.nightwind_.ClearToEmpty();
  _impl_.daypower_.ClearToEmpty();
  _impl_.nightpower_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ForecastWeather::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 120, 2> ForecastWeather::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ForecastWeather_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string date = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.date_)}},
    // string week = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.week_)}},
    // string dayweather = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.dayweather_)}},
    // string nightweather = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.nightweather_)}},
    // string daytemp = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.daytemp_)}},
    // string nighttemp = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.nighttemp_)}},
    // string daywind = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.daywind_)}},
    // string nightwind = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.nightwind_)}},
    // string daypower = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.daypower_)}},
    // string nightpower = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.nightpower_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string date = 1;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.date_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string week = 2;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.week_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string dayweather = 3;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.dayweather_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string nightweather = 4;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.nightweather_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string daytemp = 5;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.daytemp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string nighttemp = 6;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.nighttemp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string daywind = 7;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.daywind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string nightwind = 8;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.nightwind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string daypower = 9;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.daypower_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string nightpower = 10;
    {PROTOBUF_FIELD_OFFSET(ForecastWeather, _impl_.nightpower_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\4\4\12\14\7\11\7\11\10\12\0\0\0\0\0"
    "weather.ForecastWeather"
    "date"
    "week"
    "dayweather"
    "nightweather"
    "daytemp"
    "nighttemp"
    "daywind"
    "nightwind"
    "daypower"
    "nightpower"
  }},
};

::uint8_t* ForecastWeather::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:weather.ForecastWeather)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string date = 1;
  if (!this->_internal_date().empty()) {
    const std::string& _s = this->_internal_date();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.date");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string week = 2;
  if (!this->_internal_week().empty()) {
    const std::string& _s = this->_internal_week();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.week");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string dayweather = 3;
  if (!this->_internal_dayweather().empty()) {
    const std::string& _s = this->_internal_dayweather();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.dayweather");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string nightweather = 4;
  if (!this->_internal_nightweather().empty()) {
    const std::string& _s = this->_internal_nightweather();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.nightweather");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string daytemp = 5;
  if (!this->_internal_daytemp().empty()) {
    const std::string& _s = this->_internal_daytemp();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.daytemp");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string nighttemp = 6;
  if (!this->_internal_nighttemp().empty()) {
    const std::string& _s = this->_internal_nighttemp();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.nighttemp");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string daywind = 7;
  if (!this->_internal_daywind().empty()) {
    const std::string& _s = this->_internal_daywind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.daywind");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string nightwind = 8;
  if (!this->_internal_nightwind().empty()) {
    const std::string& _s = this->_internal_nightwind();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.nightwind");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string daypower = 9;
  if (!this->_internal_daypower().empty()) {
    const std::string& _s = this->_internal_daypower();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.daypower");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string nightpower = 10;
  if (!this->_internal_nightpower().empty()) {
    const std::string& _s = this->_internal_nightpower();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeather.nightpower");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:weather.ForecastWeather)
  return target;
}

::size_t ForecastWeather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:weather.ForecastWeather)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date = 1;
  if (!this->_internal_date().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_date());
  }

  // string week = 2;
  if (!this->_internal_week().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_week());
  }

  // string dayweather = 3;
  if (!this->_internal_dayweather().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_dayweather());
  }

  // string nightweather = 4;
  if (!this->_internal_nightweather().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nightweather());
  }

  // string daytemp = 5;
  if (!this->_internal_daytemp().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_daytemp());
  }

  // string nighttemp = 6;
  if (!this->_internal_nighttemp().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nighttemp());
  }

  // string daywind = 7;
  if (!this->_internal_daywind().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_daywind());
  }

  // string nightwind = 8;
  if (!this->_internal_nightwind().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nightwind());
  }

  // string daypower = 9;
  if (!this->_internal_daypower().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_daypower());
  }

  // string nightpower = 10;
  if (!this->_internal_nightpower().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nightpower());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ForecastWeather::_class_data_ = {
    ForecastWeather::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ForecastWeather::GetClassData() const {
  return &_class_data_;
}

void ForecastWeather::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ForecastWeather*>(&to_msg);
  auto& from = static_cast<const ForecastWeather&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:weather.ForecastWeather)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_date().empty()) {
    _this->_internal_set_date(from._internal_date());
  }
  if (!from._internal_week().empty()) {
    _this->_internal_set_week(from._internal_week());
  }
  if (!from._internal_dayweather().empty()) {
    _this->_internal_set_dayweather(from._internal_dayweather());
  }
  if (!from._internal_nightweather().empty()) {
    _this->_internal_set_nightweather(from._internal_nightweather());
  }
  if (!from._internal_daytemp().empty()) {
    _this->_internal_set_daytemp(from._internal_daytemp());
  }
  if (!from._internal_nighttemp().empty()) {
    _this->_internal_set_nighttemp(from._internal_nighttemp());
  }
  if (!from._internal_daywind().empty()) {
    _this->_internal_set_daywind(from._internal_daywind());
  }
  if (!from._internal_nightwind().empty()) {
    _this->_internal_set_nightwind(from._internal_nightwind());
  }
  if (!from._internal_daypower().empty()) {
    _this->_internal_set_daypower(from._internal_daypower());
  }
  if (!from._internal_nightpower().empty()) {
    _this->_internal_set_nightpower(from._internal_nightpower());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ForecastWeather::CopyFrom(const ForecastWeather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:weather.ForecastWeather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ForecastWeather::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ForecastWeather::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ForecastWeather::InternalSwap(ForecastWeather* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.date_, &other->_impl_.date_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.week_, &other->_impl_.week_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dayweather_, &other->_impl_.dayweather_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nightweather_, &other->_impl_.nightweather_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.daytemp_, &other->_impl_.daytemp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nighttemp_, &other->_impl_.nighttemp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.daywind_, &other->_impl_.daywind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nightwind_, &other->_impl_.nightwind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.daypower_, &other->_impl_.daypower_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nightpower_, &other->_impl_.nightpower_, arena);
}

::google::protobuf::Metadata ForecastWeather::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_weather_2eproto_getter, &descriptor_table_weather_2eproto_once,
      file_level_metadata_weather_2eproto[2]);
}
// ===================================================================

class LivesWeatherReplay::_Internal {
 public:
  using HasBits = decltype(std::declval<LivesWeatherReplay>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LivesWeatherReplay, _impl_._has_bits_);
  static const ::weather::LivesWeather& livesweather(const LivesWeatherReplay* msg);
  static void set_has_livesweather(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::weather::LivesWeather& LivesWeatherReplay::_Internal::livesweather(const LivesWeatherReplay* msg) {
  return *msg->_impl_.livesweather_;
}
LivesWeatherReplay::LivesWeatherReplay(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:weather.LivesWeatherReplay)
}
inline PROTOBUF_NDEBUG_INLINE LivesWeatherReplay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LivesWeatherReplay::LivesWeatherReplay(
    ::google::protobuf::Arena* arena,
    const LivesWeatherReplay& from)
    : ::google::protobuf::Message(arena) {
  LivesWeatherReplay* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.livesweather_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::weather::LivesWeather>(arena, *from._impl_.livesweather_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:weather.LivesWeatherReplay)
}
inline PROTOBUF_NDEBUG_INLINE LivesWeatherReplay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LivesWeatherReplay::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.livesweather_ = {};
}
LivesWeatherReplay::~LivesWeatherReplay() {
  // @@protoc_insertion_point(destructor:weather.LivesWeatherReplay)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LivesWeatherReplay::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.livesweather_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LivesWeatherReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:weather.LivesWeatherReplay)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.livesweather_ != nullptr);
    _impl_.livesweather_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LivesWeatherReplay::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> LivesWeatherReplay::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LivesWeatherReplay, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LivesWeatherReplay_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .weather.LivesWeather livesWeather = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LivesWeatherReplay, _impl_.livesweather_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .weather.LivesWeather livesWeather = 1;
    {PROTOBUF_FIELD_OFFSET(LivesWeatherReplay, _impl_.livesweather_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::weather::LivesWeather>()},
  }}, {{
  }},
};

::uint8_t* LivesWeatherReplay::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:weather.LivesWeatherReplay)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .weather.LivesWeather livesWeather = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::livesweather(this),
        _Internal::livesweather(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:weather.LivesWeatherReplay)
  return target;
}

::size_t LivesWeatherReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:weather.LivesWeatherReplay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .weather.LivesWeather livesWeather = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.livesweather_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LivesWeatherReplay::_class_data_ = {
    LivesWeatherReplay::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LivesWeatherReplay::GetClassData() const {
  return &_class_data_;
}

void LivesWeatherReplay::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LivesWeatherReplay*>(&to_msg);
  auto& from = static_cast<const LivesWeatherReplay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:weather.LivesWeatherReplay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_livesweather()->::weather::LivesWeather::MergeFrom(
        from._internal_livesweather());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LivesWeatherReplay::CopyFrom(const LivesWeatherReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:weather.LivesWeatherReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LivesWeatherReplay::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LivesWeatherReplay::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LivesWeatherReplay::InternalSwap(LivesWeatherReplay* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.livesweather_, other->_impl_.livesweather_);
}

::google::protobuf::Metadata LivesWeatherReplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_weather_2eproto_getter, &descriptor_table_weather_2eproto_once,
      file_level_metadata_weather_2eproto[3]);
}
// ===================================================================

class ForecastWeatherReplay::_Internal {
 public:
};

ForecastWeatherReplay::ForecastWeatherReplay(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:weather.ForecastWeatherReplay)
}
inline PROTOBUF_NDEBUG_INLINE ForecastWeatherReplay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : forecastweathers_{visibility, arena, from.forecastweathers_},
        reporttime_(arena, from.reporttime_),
        _cached_size_{0} {}

ForecastWeatherReplay::ForecastWeatherReplay(
    ::google::protobuf::Arena* arena,
    const ForecastWeatherReplay& from)
    : ::google::protobuf::Message(arena) {
  ForecastWeatherReplay* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:weather.ForecastWeatherReplay)
}
inline PROTOBUF_NDEBUG_INLINE ForecastWeatherReplay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : forecastweathers_{visibility, arena},
        reporttime_(arena),
        _cached_size_{0} {}

inline void ForecastWeatherReplay::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ForecastWeatherReplay::~ForecastWeatherReplay() {
  // @@protoc_insertion_point(destructor:weather.ForecastWeatherReplay)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ForecastWeatherReplay::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.reporttime_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ForecastWeatherReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:weather.ForecastWeatherReplay)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.forecastweathers_.Clear();
  _impl_.reporttime_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ForecastWeatherReplay::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 48, 2> ForecastWeatherReplay::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ForecastWeatherReplay_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .weather.ForecastWeather forecastWeathers = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeatherReplay, _impl_.forecastweathers_)}},
    // string reporttime = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ForecastWeatherReplay, _impl_.reporttime_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string reporttime = 1;
    {PROTOBUF_FIELD_OFFSET(ForecastWeatherReplay, _impl_.reporttime_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .weather.ForecastWeather forecastWeathers = 2;
    {PROTOBUF_FIELD_OFFSET(ForecastWeatherReplay, _impl_.forecastweathers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::weather::ForecastWeather>()},
  }}, {{
    "\35\12\0\0\0\0\0\0"
    "weather.ForecastWeatherReplay"
    "reporttime"
  }},
};

::uint8_t* ForecastWeatherReplay::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:weather.ForecastWeatherReplay)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string reporttime = 1;
  if (!this->_internal_reporttime().empty()) {
    const std::string& _s = this->_internal_reporttime();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "weather.ForecastWeatherReplay.reporttime");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .weather.ForecastWeather forecastWeathers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_forecastweathers_size()); i < n; i++) {
    const auto& repfield = this->_internal_forecastweathers().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:weather.ForecastWeatherReplay)
  return target;
}

::size_t ForecastWeatherReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:weather.ForecastWeatherReplay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .weather.ForecastWeather forecastWeathers = 2;
  total_size += 1UL * this->_internal_forecastweathers_size();
  for (const auto& msg : this->_internal_forecastweathers()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string reporttime = 1;
  if (!this->_internal_reporttime().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reporttime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ForecastWeatherReplay::_class_data_ = {
    ForecastWeatherReplay::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ForecastWeatherReplay::GetClassData() const {
  return &_class_data_;
}

void ForecastWeatherReplay::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ForecastWeatherReplay*>(&to_msg);
  auto& from = static_cast<const ForecastWeatherReplay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:weather.ForecastWeatherReplay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_forecastweathers()->MergeFrom(
      from._internal_forecastweathers());
  if (!from._internal_reporttime().empty()) {
    _this->_internal_set_reporttime(from._internal_reporttime());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ForecastWeatherReplay::CopyFrom(const ForecastWeatherReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:weather.ForecastWeatherReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ForecastWeatherReplay::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ForecastWeatherReplay::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ForecastWeatherReplay::InternalSwap(ForecastWeatherReplay* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.forecastweathers_.InternalSwap(&other->_impl_.forecastweathers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reporttime_, &other->_impl_.reporttime_, arena);
}

::google::protobuf::Metadata ForecastWeatherReplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_weather_2eproto_getter, &descriptor_table_weather_2eproto_once,
      file_level_metadata_weather_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace weather
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
